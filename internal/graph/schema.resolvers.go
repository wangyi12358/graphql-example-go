package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"go-gin-example/internal/graph/graph_model"
	"go-gin-example/pkg/validate"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graph_model.CreateUser) (*graph_model.User, error) {
	err := validate.Validate.Struct(input)
	if err != nil {
		return nil, validate.JoinValidateErrors(err)
	}
	user, err := r.UserService.Create(&input)
	if err != nil {
		return nil, err
	}
	return OfUser(user), nil
}

// CreateLov is the resolver for the createLov field.
func (r *mutationResolver) CreateLov(ctx context.Context, input graph_model.CreateLov) (*graph_model.Lov, error) {
	lov, err := r.LovService.Create(&input)
	if err != nil {
		return nil, err
	}
	return OfLov(lov), nil
}

// DeleteLov is the resolver for the deleteLov field.
func (r *mutationResolver) DeleteLov(ctx context.Context, id int) (bool, error) {
	err := r.LovService.DeleteById(int64(id))
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateLovField is the resolver for the createLovField field.
func (r *mutationResolver) CreateLovField(ctx context.Context, input graph_model.CreateLovField) (*graph_model.LovField, error) {
	lovField, err := r.LovFieldService.CreateLovField(&input)
	if err != nil {
		return nil, err
	}
	return OfLovField(lovField), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination graph_model.Pagination, usersInput *graph_model.UsersInput) (*graph_model.Users, error) {
	users, err := r.UserService.FindList(&pagination, usersInput)
	if err != nil {
		return nil, err
	}
	total, err := r.UserService.FindTotal(usersInput)
	if err != nil {
		return nil, err
	}
	return &graph_model.Users{
		Total: int(total),
		Data:  OfUsers(users),
	}, nil
}

// LovPage is the resolver for the lovPage field.
func (r *queryResolver) LovPage(ctx context.Context, pagination graph_model.Pagination, lovPageInput *graph_model.LovPageInput) (*graph_model.LovPage, error) {
	list, err := r.LovService.List(&pagination, lovPageInput)
	if err != nil {
		return nil, err
	}
	total, err := r.LovService.Total(lovPageInput)
	if err != nil {
		return nil, err
	}
	return &graph_model.LovPage{
		Total: int(total),
		Data:  OfLovList(list),
	}, nil
}

// FindLov is the resolver for the findLov field.
func (r *queryResolver) FindLov(ctx context.Context, id int) (*graph_model.Lov, error) {
	lov, err := r.LovService.FindById(int64(id))
	if err != nil {
		return nil, err
	}
	return OfLov(lov), nil
}

// LovFields is the resolver for the lovFields field.
func (r *queryResolver) LovFields(ctx context.Context, lovID int) ([]*graph_model.LovField, error) {
	lovFields, err := r.LovFieldService.FindListByLovId(int64(lovID))
	if err != nil {
		return nil, err
	}
	return OfLovFields(lovFields), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
